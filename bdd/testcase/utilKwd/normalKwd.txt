*** Keywords ***
I_set_crtTrans_params_to_Normal
    ${geneAdd}    getGeneAdd    ${host}
    ${transList}    Create List    ${geneAdd}    ${recieverAdd}    ${10}    ${2}
    [Return]    ${transList}

I_post_a_crtTrans_request
    [Arguments]    @{transList}
    ${resp}    setPostRequest    ${host}    ptn_cmdCreateTransaction    @{transList}
    [Return]    ${resp}

I_get_a_crtTrans_result
    [Arguments]    ${resp}
    ${jsonRes}    Evaluate    demjson.encode(${resp.content})    demjson
    ${jsonRes}    To Json    ${jsonRes}
    Should Contain    ${jsonRes['jsonrpc']}    2.0    msg="jsonrpc:failed"
    Should Contain    str(${jsonRes['id']})    1    msg="id:failed"
    ${ret}    Should Match Regexp    ${jsonRes['result']}    ${result_code}    msg="result:does't match Result expression"
    [Return]    ${ret}

I_set_signTrans_input_to_Normal
    [Arguments]    ${ret}
    [Return]    ${ret}

I_post_a_signtTrans_request
    [Arguments]    ${crtRet}
    ${headers}    Create Dictionary    Content-Type=application/json
    @{signList}    Set Variable    ${crtRet}    ALL    1
    ${data}    Create Dictionary    jsonrpc=2.0    method=ptn_signRawTransaction    params=@{signList}    id=${1}
    Create Session    trans    http://localhost:8545
    ${resp}    Post Request    trans    http://localhost:8545    data=${data}    headers=${headers}
    [Return]    ${resp}

I_get_signTrans_hex_and_txid
    [Arguments]    ${resp}
    Should Contain    ${resp.content}['jsonrpc']    2.0    msg="jsonrpc:failed"
    Should Contain    ${resp.content}['id']    1    msg="id:failed"
    ${hex}    Should Match Regexp    ${resp.content}['result']['hex']    ${result_hex}    msg="hex:does't match Result expression"
    ${txid}    Should Match Regexp    ${resp.content}['result']['txid']    ${result_txid}    msg="txid:does't match Result expression"
    [Return]    ${hex}

I_set_sendTrans_input_to_Normal
    [Arguments]    ${ret}
    @{sendList}    Create List    ${ret}
    [Return]    @{sendList}

I_post_a_sendTrans_request
    [Arguments]    @{sendList}
    ${resp}    setPostRequest    ${host}    ptn_sendRawTransaction    @{sendList}
    [Return]    ${resp}

I_get_the_sendTrans_result
    [Arguments]    ${resp}
    Should Contain    ${resp.content}['jsonrpc']    "2.0"    msg="jsonrpc:failed"
    Should Contain    ${resp.content}['id']    1    msg="id:failed"
    Should Match Regexp    ${resp.content}['result']    ${sendResult}    msg="result:does't match expression"
    [Return]    ${sendResult}

I_set_CcinvokePass_params_to_Normal
    [Arguments]    ${tokenId}    ${tokenDecimal}    ${tokenAmount}    ${amount}    ${poundage}
    ${geneAdd}    getGeneAdd    ${host}
    ${ccTokenList}    Create List    createToken    evidence    ${tokenId}    ${tokenDecimal}    ${tokenAmount}
    ...    ${recieverAdd}
    ${ccList}    Create List    ${geneAdd}    ${recieverAdd}    ${amount}    ${poundage}    ${contractId}
    ...    ${ccTokenList}    1    ${600000}    ${EMPTY}
    [Return]    ${ccList}

I_post_a_CcinvokePass_request
    [Arguments]    ${transList}
    ${resp}    setPostRequest    ${host}    contract_ccinvoketxPass    ${transList}
    [Return]    ${resp}

I_get_a_CcinvokePass_result
    [Arguments]    ${resp}    ${result_code}
    log    ${resp.content}
    Should Contain    ${resp.content}['jsonrpc']    "2.0"    msg="jsonrpc:failed"
    Should Contain    ${resp.content}['id']    1    msg="id:failed"
    ${ret}    Should Match Regexp    ${resp.content}['result']    ${result_code}    msg="result:does't match Result expression"
    [Return]    ${ret}

I_set_TransferToken_params_to_Normal
    [Arguments]    ${preTokenId}
    ${geneAdd}    listAccounts
    ${result}    getBalance    ${geneAdd}
    ${tokenId}    ${value}    getTokenStarts    ${preTokenId}    ${result}
    ${type}    Evaluate    type(${result})
    ${ccList}    Create List    ${tokenId}    ${geneAdd}    ${recieverAdd}    2    1
    ...    description    1    ${6000000}
    [Return]    ${ccList}

I_post_a_TransferToken_request
    [Arguments]    @{transList}
    ${resp}    setPostRequest    ${host}    wallet_transferToken    @{transList}
    [Return]    ${resp}

I_get_a_TransferToken_result
    [Arguments]    @{resp}
    log    ${resp.content}
    Should Contain    ${resp.content}['jsonrpc']    "2.0"    msg="jsonrpc:failed"
    Should Contain    ${resp.content}['id']    1    msg="id:failed"
    ${ret}    Should Match Regexp    ${resp.content}['result']    ${result_code}    msg="result:does't match Result expression"
    [Return]    ${ret}

I_set_GetTxByReqId_params_to_Normal
    [Arguments]    ${txHash}
    ${ccList}    Create List    ${txHash}['info']
    [Return]    ${ccList}

I_post_a_GetTxByReqId_request
    [Arguments]    @{transList}
    ${resp}    setPostRequest    ${host}    dag_getTxByHash    @{transList}
    [Return]    ${resp}

I_get_a_GetTxByReqId_result
    [Arguments]    ${resp}    ${result_code}
    log    ${resp.content}
    Should Contain    ${resp.content}['jsonrpc']    "2.0"    msg="jsonrpc:failed"
    Should Contain    ${resp.content}['id']    1    msg="id:failed"
    ${ret}    Should Match Regexp    ${resp.content}['result']    ${result_code}    msg="result:does't match Result expression"
    [Return]    ${ret}

I_set_getBalance_params_to_Normal
    [Arguments]    ${address}
    @{address}    Create List    ${address}
    [Return]    @{address}

I_post_a_getBalance_request
    [Arguments]    @{address}
    ${resp}    setPostRequest    ${host}    ptn_getBalance    @{address}
    [Return]    ${resp}

I_get_a_getBalance_result
    [Arguments]    ${resp}
    #${type}    Evaluate    type(${resp.content})
    log    ${resp.content}
    ${jsonRes}    Evaluate    demjson.encode(${resp.content})    demjson
    ${jsonRes}    To Json    ${jsonRes}
    Should Contain    ${jsonRes['jsonrpc']}    2.0    msg="jsonrpc:failed"
    Should Contain    str(${jsonRes['id']})    1    msg="id:failed"
    ${strResult}    Evaluate    str(${jsonRes['result']})
    ${PTN}    Run Keyword If    ${strResult}=={}    Set Variable    ${0}
    ...    ELSE    Set Variable    ${jsonRes['result']['PTN']}
    log    ${PTN}
    [Return]    ${PTN}    ${jsonRes}


I_set_TransferToken_params_to_Normal
    [Arguments]    ${preTokenId}
    ${geneAdd}    listAccounts
    ${result}    getBalance    ${geneAdd}
    ${tokenId}    ${value}    getTokenStarts    ${preTokenId}    ${result}
    ${type}    Evaluate    type(${result})
    ${ccList}    Create List    ${tokenId}    ${geneAdd}    ${recieverAdd}    2    1
    ...    description    1    ${6000000}
    [Return]    ${ccList}
	
I_post_a_TransferToken_request
    [Arguments]    @{transList}
    ${resp}    setPostRequest    ${host}    wallet_transferToken    @{transList}
    [Return]    ${resp}

I_get_a_TransferToken_result
    [Arguments]    @{resp}
    log    ${resp.content}
    Should Contain    ${resp.content}['jsonrpc']    "2.0"    msg="jsonrpc:failed"
    Should Contain    ${resp.content}['id']    1    msg="id:failed"
    ${ret}    Should Match Regexp    ${resp.content}['error']['code']    ${result_code}    msg="result:does't match Result expression"
    [Return]    ${ret}
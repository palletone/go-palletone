// Code generated by MockGen. DO NOT EDIT.
// Source: ./dag/interface.go

// Package dag is a generated GoMock package.
package dag

import (
	"github.com/golang/mock/gomock"
	"github.com/palletone/go-palletone/common"
	"github.com/palletone/go-palletone/common/event"
	"github.com/palletone/go-palletone/common/p2p/discover"
	"github.com/palletone/go-palletone/contracts/list"
	"github.com/palletone/go-palletone/core"
	"github.com/palletone/go-palletone/dag/modules"
	"github.com/palletone/go-palletone/dag/txspool"
	"reflect"
	"time"
)

// MockIDag is a mock of IDag interface
type MockIDag struct {
	ctrl     *gomock.Controller
	recorder *MockIDagMockRecorder
}

// MockIDagMockRecorder is the mock recorder for MockIDag
type MockIDagMockRecorder struct {
	mock *MockIDag
}

// NewMockIDag creates a new mock instance
func NewMockIDag(ctrl *gomock.Controller) *MockIDag {
	mock := &MockIDag{ctrl: ctrl}
	mock.recorder = &MockIDagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDag) EXPECT() *MockIDagMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIDag) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockIDagMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDag)(nil).Close))
}

// GetCommon mocks base method
func (m *MockIDag) GetCommon(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommon", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommon indicates an expected call of GetCommon
func (mr *MockIDagMockRecorder) GetCommon(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommon", reflect.TypeOf((*MockIDag)(nil).GetCommon), key)
}

// GetCommonByPrefix mocks base method
func (m *MockIDag) GetCommonByPrefix(prefix []byte) map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommonByPrefix", prefix)
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetCommonByPrefix indicates an expected call of GetCommonByPrefix
func (mr *MockIDagMockRecorder) GetCommonByPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommonByPrefix", reflect.TypeOf((*MockIDag)(nil).GetCommonByPrefix), prefix)
}

// IsEmpty mocks base method
func (m *MockIDag) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockIDagMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockIDag)(nil).IsEmpty))
}

// CurrentUnit mocks base method
func (m *MockIDag) CurrentUnit(token modules.AssetId) *modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUnit", token)
	ret0, _ := ret[0].(*modules.Unit)
	return ret0
}

// CurrentUnit indicates an expected call of CurrentUnit
func (mr *MockIDagMockRecorder) CurrentUnit(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUnit", reflect.TypeOf((*MockIDag)(nil).CurrentUnit), token)
}

// VerifyHeader mocks base method
func (m *MockIDag) VerifyHeader(header *modules.Header) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyHeader", header)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader
func (mr *MockIDagMockRecorder) VerifyHeader(header interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeader", reflect.TypeOf((*MockIDag)(nil).VerifyHeader), header)
}

// GetCurrentUnit mocks base method
func (m *MockIDag) GetCurrentUnit(assetId modules.AssetId) *modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUnit", assetId)
	ret0, _ := ret[0].(*modules.Unit)
	return ret0
}

// GetCurrentUnit indicates an expected call of GetCurrentUnit
func (mr *MockIDagMockRecorder) GetCurrentUnit(assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUnit", reflect.TypeOf((*MockIDag)(nil).GetCurrentUnit), assetId)
}

// GetMainCurrentUnit mocks base method
func (m *MockIDag) GetMainCurrentUnit() *modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainCurrentUnit")
	ret0, _ := ret[0].(*modules.Unit)
	return ret0
}

// GetMainCurrentUnit indicates an expected call of GetMainCurrentUnit
func (mr *MockIDagMockRecorder) GetMainCurrentUnit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainCurrentUnit", reflect.TypeOf((*MockIDag)(nil).GetMainCurrentUnit))
}

// GetCurrentMemUnit mocks base method
func (m *MockIDag) GetCurrentMemUnit(assetId modules.AssetId, index uint64) *modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMemUnit", assetId, index)
	ret0, _ := ret[0].(*modules.Unit)
	return ret0
}

// GetCurrentMemUnit indicates an expected call of GetCurrentMemUnit
func (mr *MockIDagMockRecorder) GetCurrentMemUnit(assetId, index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMemUnit", reflect.TypeOf((*MockIDag)(nil).GetCurrentMemUnit), assetId, index)
}

// InsertDag mocks base method
func (m *MockIDag) InsertDag(units modules.Units, txpool txspool.ITxPool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDag", units, txpool)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertDag indicates an expected call of InsertDag
func (mr *MockIDagMockRecorder) InsertDag(units, txpool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDag", reflect.TypeOf((*MockIDag)(nil).InsertDag), units, txpool)
}

// GetUnitByHash mocks base method
func (m *MockIDag) GetUnitByHash(hash common.Hash) (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitByHash", hash)
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitByHash indicates an expected call of GetUnitByHash
func (mr *MockIDagMockRecorder) GetUnitByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitByHash", reflect.TypeOf((*MockIDag)(nil).GetUnitByHash), hash)
}

// HasHeader mocks base method
func (m *MockIDag) HasHeader(arg0 common.Hash, arg1 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHeader", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasHeader indicates an expected call of HasHeader
func (mr *MockIDagMockRecorder) HasHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHeader", reflect.TypeOf((*MockIDag)(nil).HasHeader), arg0, arg1)
}

// GetHeaderByNumber mocks base method
func (m *MockIDag) GetHeaderByNumber(number *modules.ChainIndex) (*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (mr *MockIDagMockRecorder) GetHeaderByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockIDag)(nil).GetHeaderByNumber), number)
}

// GetHeaderByHash mocks base method
func (m *MockIDag) GetHeaderByHash(arg0 common.Hash) (*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", arg0)
	ret0, _ := ret[0].(*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockIDagMockRecorder) GetHeaderByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockIDag)(nil).GetHeaderByHash), arg0)
}

// GetUnstableUnits mocks base method
func (m *MockIDag) GetUnstableUnits() []*modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnstableUnits")
	ret0, _ := ret[0].([]*modules.Unit)
	return ret0
}

// GetUnstableUnits indicates an expected call of GetUnstableUnits
func (mr *MockIDagMockRecorder) GetUnstableUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnstableUnits", reflect.TypeOf((*MockIDag)(nil).GetUnstableUnits))
}

// CurrentHeader mocks base method
func (m *MockIDag) CurrentHeader(token modules.AssetId) *modules.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeader", token)
	ret0, _ := ret[0].(*modules.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader
func (mr *MockIDagMockRecorder) CurrentHeader(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockIDag)(nil).CurrentHeader), token)
}

// GetUnitTransactions mocks base method
func (m *MockIDag) GetUnitTransactions(hash common.Hash) (modules.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTransactions", hash)
	ret0, _ := ret[0].(modules.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTransactions indicates an expected call of GetUnitTransactions
func (mr *MockIDagMockRecorder) GetUnitTransactions(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTransactions", reflect.TypeOf((*MockIDag)(nil).GetUnitTransactions), hash)
}

// GetUnitTxsHash mocks base method
func (m *MockIDag) GetUnitTxsHash(hash common.Hash) ([]common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTxsHash", hash)
	ret0, _ := ret[0].([]common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTxsHash indicates an expected call of GetUnitTxsHash
func (mr *MockIDagMockRecorder) GetUnitTxsHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTxsHash", reflect.TypeOf((*MockIDag)(nil).GetUnitTxsHash), hash)
}

// GetTransaction mocks base method
func (m *MockIDag) GetTransaction(hash common.Hash) (*modules.TransactionWithUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", hash)
	ret0, _ := ret[0].(*modules.TransactionWithUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockIDagMockRecorder) GetTransaction(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockIDag)(nil).GetTransaction), hash)
}

// GetTransactionOnly mocks base method
func (m *MockIDag) GetTransactionOnly(hash common.Hash) (*modules.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionOnly", hash)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionOnly indicates an expected call of GetTransactionOnly
func (mr *MockIDagMockRecorder) GetTransactionOnly(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionOnly", reflect.TypeOf((*MockIDag)(nil).GetTransactionOnly), hash)
}

// GetTxByReqId mocks base method
func (m *MockIDag) GetTxByReqId(reqid common.Hash) (*modules.TransactionWithUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxByReqId", reqid)
	ret0, _ := ret[0].(*modules.TransactionWithUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxByReqId indicates an expected call of GetTxByReqId
func (mr *MockIDagMockRecorder) GetTxByReqId(reqid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxByReqId", reflect.TypeOf((*MockIDag)(nil).GetTxByReqId), reqid)
}

// IsTransactionExist mocks base method
func (m *MockIDag) IsTransactionExist(hash common.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTransactionExist", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTransactionExist indicates an expected call of IsTransactionExist
func (mr *MockIDagMockRecorder) IsTransactionExist(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTransactionExist", reflect.TypeOf((*MockIDag)(nil).IsTransactionExist), hash)
}

// GetTxSearchEntry mocks base method
func (m *MockIDag) GetTxSearchEntry(hash common.Hash) (*modules.TxLookupEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxSearchEntry", hash)
	ret0, _ := ret[0].(*modules.TxLookupEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxSearchEntry indicates an expected call of GetTxSearchEntry
func (mr *MockIDagMockRecorder) GetTxSearchEntry(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxSearchEntry", reflect.TypeOf((*MockIDag)(nil).GetTxSearchEntry), hash)
}

// InsertHeaderDag mocks base method
func (m *MockIDag) InsertHeaderDag(arg0 []*modules.Header) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHeaderDag", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertHeaderDag indicates an expected call of InsertHeaderDag
func (mr *MockIDagMockRecorder) InsertHeaderDag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHeaderDag", reflect.TypeOf((*MockIDag)(nil).InsertHeaderDag), arg0)
}

// HasUnit mocks base method
func (m *MockIDag) HasUnit(hash common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUnit", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUnit indicates an expected call of HasUnit
func (mr *MockIDagMockRecorder) HasUnit(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUnit", reflect.TypeOf((*MockIDag)(nil).HasUnit), hash)
}

// UnitIsConfirmedByHash mocks base method
func (m *MockIDag) UnitIsConfirmedByHash(hash common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitIsConfirmedByHash", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UnitIsConfirmedByHash indicates an expected call of UnitIsConfirmedByHash
func (mr *MockIDagMockRecorder) UnitIsConfirmedByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitIsConfirmedByHash", reflect.TypeOf((*MockIDag)(nil).UnitIsConfirmedByHash), hash)
}

// ParentsIsConfirmByHash mocks base method
func (m *MockIDag) ParentsIsConfirmByHash(hash common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentsIsConfirmByHash", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ParentsIsConfirmByHash indicates an expected call of ParentsIsConfirmByHash
func (mr *MockIDagMockRecorder) ParentsIsConfirmByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentsIsConfirmByHash", reflect.TypeOf((*MockIDag)(nil).ParentsIsConfirmByHash), hash)
}

// IsHeaderExist mocks base method
func (m *MockIDag) IsHeaderExist(hash common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHeaderExist", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHeaderExist indicates an expected call of IsHeaderExist
func (mr *MockIDagMockRecorder) IsHeaderExist(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHeaderExist", reflect.TypeOf((*MockIDag)(nil).IsHeaderExist), hash)
}

// SaveUnit mocks base method
func (m *MockIDag) SaveUnit(unit *modules.Unit, txpool txspool.ITxPool, isGenesis bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUnit", unit, txpool, isGenesis)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUnit indicates an expected call of SaveUnit
func (mr *MockIDagMockRecorder) SaveUnit(unit, txpool, isGenesis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUnit", reflect.TypeOf((*MockIDag)(nil).SaveUnit), unit, txpool, isGenesis)
}

// CreateUnit mocks base method
func (m *MockIDag) CreateUnit(mAddr *common.Address, txpool txspool.ITxPool, t time.Time) (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnit", mAddr, txpool, t)
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnit indicates an expected call of CreateUnit
func (mr *MockIDagMockRecorder) CreateUnit(mAddr, txpool, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnit", reflect.TypeOf((*MockIDag)(nil).CreateUnit), mAddr, txpool, t)
}

// FastSyncCommitHead mocks base method
func (m *MockIDag) FastSyncCommitHead(arg0 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FastSyncCommitHead", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FastSyncCommitHead indicates an expected call of FastSyncCommitHead
func (mr *MockIDagMockRecorder) FastSyncCommitHead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastSyncCommitHead", reflect.TypeOf((*MockIDag)(nil).FastSyncCommitHead), arg0)
}

// GetGenesisUnit mocks base method
func (m *MockIDag) GetGenesisUnit() (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisUnit")
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenesisUnit indicates an expected call of GetGenesisUnit
func (mr *MockIDagMockRecorder) GetGenesisUnit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisUnit", reflect.TypeOf((*MockIDag)(nil).GetGenesisUnit))
}

// GetConfig mocks base method
func (m *MockIDag) GetConfig(name string) ([]byte, *modules.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*modules.StateVersion)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConfig indicates an expected call of GetConfig
func (mr *MockIDagMockRecorder) GetConfig(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockIDag)(nil).GetConfig), name)
}

// GetContractState mocks base method
func (m *MockIDag) GetContractState(contractid []byte, field string) ([]byte, *modules.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractState", contractid, field)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*modules.StateVersion)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContractState indicates an expected call of GetContractState
func (mr *MockIDagMockRecorder) GetContractState(contractid, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractState", reflect.TypeOf((*MockIDag)(nil).GetContractState), contractid, field)
}

// GetContractStatesById mocks base method
func (m *MockIDag) GetContractStatesById(id []byte) (map[string]*modules.ContractStateValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStatesById", id)
	ret0, _ := ret[0].(map[string]*modules.ContractStateValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStatesById indicates an expected call of GetContractStatesById
func (mr *MockIDagMockRecorder) GetContractStatesById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStatesById", reflect.TypeOf((*MockIDag)(nil).GetContractStatesById), id)
}

// GetContractStatesByPrefix mocks base method
func (m *MockIDag) GetContractStatesByPrefix(id []byte, prefix string) (map[string]*modules.ContractStateValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStatesByPrefix", id, prefix)
	ret0, _ := ret[0].(map[string]*modules.ContractStateValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStatesByPrefix indicates an expected call of GetContractStatesByPrefix
func (mr *MockIDagMockRecorder) GetContractStatesByPrefix(id, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStatesByPrefix", reflect.TypeOf((*MockIDag)(nil).GetContractStatesByPrefix), id, prefix)
}

// GetUnitNumber mocks base method
func (m *MockIDag) GetUnitNumber(hash common.Hash) (*modules.ChainIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNumber", hash)
	ret0, _ := ret[0].(*modules.ChainIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNumber indicates an expected call of GetUnitNumber
func (mr *MockIDagMockRecorder) GetUnitNumber(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNumber", reflect.TypeOf((*MockIDag)(nil).GetUnitNumber), hash)
}

// GetUtxoView mocks base method
func (m *MockIDag) GetUtxoView(tx *modules.Transaction) (*txspool.UtxoViewpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUtxoView", tx)
	ret0, _ := ret[0].(*txspool.UtxoViewpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUtxoView indicates an expected call of GetUtxoView
func (mr *MockIDagMockRecorder) GetUtxoView(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtxoView", reflect.TypeOf((*MockIDag)(nil).GetUtxoView), tx)
}

// SubscribeChainHeadEvent mocks base method
func (m *MockIDag) SubscribeChainHeadEvent(ch chan<- modules.ChainHeadEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainHeadEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainHeadEvent indicates an expected call of SubscribeChainHeadEvent
func (mr *MockIDagMockRecorder) SubscribeChainHeadEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainHeadEvent", reflect.TypeOf((*MockIDag)(nil).SubscribeChainHeadEvent), ch)
}

// GetTrieSyncProgress mocks base method
func (m *MockIDag) GetTrieSyncProgress() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrieSyncProgress")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrieSyncProgress indicates an expected call of GetTrieSyncProgress
func (mr *MockIDagMockRecorder) GetTrieSyncProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrieSyncProgress", reflect.TypeOf((*MockIDag)(nil).GetTrieSyncProgress))
}

// GetUtxoEntry mocks base method
func (m *MockIDag) GetUtxoEntry(outpoint *modules.OutPoint) (*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUtxoEntry", outpoint)
	ret0, _ := ret[0].(*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUtxoEntry indicates an expected call of GetUtxoEntry
func (mr *MockIDagMockRecorder) GetUtxoEntry(outpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtxoEntry", reflect.TypeOf((*MockIDag)(nil).GetUtxoEntry), outpoint)
}

// GetAddrOutpoints mocks base method
func (m *MockIDag) GetAddrOutpoints(addr common.Address) ([]modules.OutPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrOutpoints", addr)
	ret0, _ := ret[0].([]modules.OutPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrOutpoints indicates an expected call of GetAddrOutpoints
func (mr *MockIDagMockRecorder) GetAddrOutpoints(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrOutpoints", reflect.TypeOf((*MockIDag)(nil).GetAddrOutpoints), addr)
}

// GetAddrUtxos mocks base method
func (m *MockIDag) GetAddrUtxos(addr common.Address) (map[modules.OutPoint]*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrUtxos", addr)
	ret0, _ := ret[0].(map[modules.OutPoint]*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrUtxos indicates an expected call of GetAddrUtxos
func (mr *MockIDagMockRecorder) GetAddrUtxos(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrUtxos", reflect.TypeOf((*MockIDag)(nil).GetAddrUtxos), addr)
}

// GetAddr1TokenUtxos mocks base method
func (m *MockIDag) GetAddr1TokenUtxos(addr common.Address, asset *modules.Asset) (map[modules.OutPoint]*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr1TokenUtxos", addr, asset)
	ret0, _ := ret[0].(map[modules.OutPoint]*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddr1TokenUtxos indicates an expected call of GetAddr1TokenUtxos
func (mr *MockIDagMockRecorder) GetAddr1TokenUtxos(addr, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr1TokenUtxos", reflect.TypeOf((*MockIDag)(nil).GetAddr1TokenUtxos), addr, asset)
}

// GetAllUtxos mocks base method
func (m *MockIDag) GetAllUtxos() (map[modules.OutPoint]*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUtxos")
	ret0, _ := ret[0].(map[modules.OutPoint]*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUtxos indicates an expected call of GetAllUtxos
func (mr *MockIDagMockRecorder) GetAllUtxos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUtxos", reflect.TypeOf((*MockIDag)(nil).GetAllUtxos))
}

// GetAddrTransactions mocks base method
func (m *MockIDag) GetAddrTransactions(addr common.Address) ([]*modules.TransactionWithUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrTransactions", addr)
	ret0, _ := ret[0].([]*modules.TransactionWithUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrTransactions indicates an expected call of GetAddrTransactions
func (mr *MockIDagMockRecorder) GetAddrTransactions(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrTransactions", reflect.TypeOf((*MockIDag)(nil).GetAddrTransactions), addr)
}

// GetAssetTxHistory mocks base method
func (m *MockIDag) GetAssetTxHistory(asset *modules.Asset) ([]*modules.TransactionWithUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetTxHistory", asset)
	ret0, _ := ret[0].([]*modules.TransactionWithUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetTxHistory indicates an expected call of GetAssetTxHistory
func (mr *MockIDagMockRecorder) GetAssetTxHistory(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetTxHistory", reflect.TypeOf((*MockIDag)(nil).GetAssetTxHistory), asset)
}

// GetContractTpl mocks base method
func (m *MockIDag) GetContractTpl(templateID []byte) (*modules.StateVersion, []byte, string, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractTpl", templateID)
	ret0, _ := ret[0].(*modules.StateVersion)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].(string)
	return ret0, ret1, ret2, ret3, ret4
}

// GetContractTpl indicates an expected call of GetContractTpl
func (mr *MockIDagMockRecorder) GetContractTpl(templateID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractTpl", reflect.TypeOf((*MockIDag)(nil).GetContractTpl), templateID)
}

// GetContract mocks base method
func (m *MockIDag) GetContract(id []byte) (*modules.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", id)
	ret0, _ := ret[0].(*modules.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract
func (mr *MockIDagMockRecorder) GetContract(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockIDag)(nil).GetContract), id)
}

// GetUnitByNumber mocks base method
func (m *MockIDag) GetUnitByNumber(number *modules.ChainIndex) (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitByNumber", number)
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitByNumber indicates an expected call of GetUnitByNumber
func (mr *MockIDagMockRecorder) GetUnitByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitByNumber", reflect.TypeOf((*MockIDag)(nil).GetUnitByNumber), number)
}

// GetUnitHashesFromHash mocks base method
func (m *MockIDag) GetUnitHashesFromHash(hash common.Hash, max uint64) []common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitHashesFromHash", hash, max)
	ret0, _ := ret[0].([]common.Hash)
	return ret0
}

// GetUnitHashesFromHash indicates an expected call of GetUnitHashesFromHash
func (mr *MockIDagMockRecorder) GetUnitHashesFromHash(hash, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitHashesFromHash", reflect.TypeOf((*MockIDag)(nil).GetUnitHashesFromHash), hash, max)
}

// GetActiveMediator mocks base method
func (m *MockIDag) GetActiveMediator(add common.Address) *core.Mediator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMediator", add)
	ret0, _ := ret[0].(*core.Mediator)
	return ret0
}

// GetActiveMediator indicates an expected call of GetActiveMediator
func (mr *MockIDagMockRecorder) GetActiveMediator(add interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMediator", reflect.TypeOf((*MockIDag)(nil).GetActiveMediator), add)
}

// GetActiveMediatorNode mocks base method
func (m *MockIDag) GetActiveMediatorNode(index int) *discover.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMediatorNode", index)
	ret0, _ := ret[0].(*discover.Node)
	return ret0
}

// GetActiveMediatorNode indicates an expected call of GetActiveMediatorNode
func (mr *MockIDagMockRecorder) GetActiveMediatorNode(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMediatorNode", reflect.TypeOf((*MockIDag)(nil).GetActiveMediatorNode), index)
}

// GetActiveMediatorNodes mocks base method
func (m *MockIDag) GetActiveMediatorNodes() map[string]*discover.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMediatorNodes")
	ret0, _ := ret[0].(map[string]*discover.Node)
	return ret0
}

// GetActiveMediatorNodes indicates an expected call of GetActiveMediatorNodes
func (mr *MockIDagMockRecorder) GetActiveMediatorNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMediatorNodes", reflect.TypeOf((*MockIDag)(nil).GetActiveMediatorNodes))
}

// GetAddrByOutPoint mocks base method
func (m *MockIDag) GetAddrByOutPoint(outPoint *modules.OutPoint) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrByOutPoint", outPoint)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrByOutPoint indicates an expected call of GetAddrByOutPoint
func (mr *MockIDagMockRecorder) GetAddrByOutPoint(outPoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrByOutPoint", reflect.TypeOf((*MockIDag)(nil).GetAddrByOutPoint), outPoint)
}

// GetTxFee mocks base method
func (m *MockIDag) GetTxFee(pay *modules.Transaction) (*modules.AmountAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxFee", pay)
	ret0, _ := ret[0].(*modules.AmountAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxFee indicates an expected call of GetTxFee
func (mr *MockIDagMockRecorder) GetTxFee(pay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxFee", reflect.TypeOf((*MockIDag)(nil).GetTxFee), pay)
}

// SetUnitGroupSign mocks base method
func (m *MockIDag) SetUnitGroupSign(unitHash common.Hash, groupSign []byte, txpool txspool.ITxPool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitGroupSign", unitHash, groupSign, txpool)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitGroupSign indicates an expected call of SetUnitGroupSign
func (mr *MockIDagMockRecorder) SetUnitGroupSign(unitHash, groupSign, txpool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitGroupSign", reflect.TypeOf((*MockIDag)(nil).SetUnitGroupSign), unitHash, groupSign, txpool)
}

// IsSynced mocks base method
func (m *MockIDag) IsSynced() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSynced")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSynced indicates an expected call of IsSynced
func (mr *MockIDagMockRecorder) IsSynced() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSynced", reflect.TypeOf((*MockIDag)(nil).IsSynced))
}

// SubscribeActiveMediatorsUpdatedEvent mocks base method
func (m *MockIDag) SubscribeActiveMediatorsUpdatedEvent(ch chan<- ActiveMediatorsUpdatedEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeActiveMediatorsUpdatedEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeActiveMediatorsUpdatedEvent indicates an expected call of SubscribeActiveMediatorsUpdatedEvent
func (mr *MockIDagMockRecorder) SubscribeActiveMediatorsUpdatedEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeActiveMediatorsUpdatedEvent", reflect.TypeOf((*MockIDag)(nil).SubscribeActiveMediatorsUpdatedEvent), ch)
}

// GetPrecedingMediatorNodes mocks base method
func (m *MockIDag) GetPrecedingMediatorNodes() map[string]*discover.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrecedingMediatorNodes")
	ret0, _ := ret[0].(map[string]*discover.Node)
	return ret0
}

// GetPrecedingMediatorNodes indicates an expected call of GetPrecedingMediatorNodes
func (mr *MockIDagMockRecorder) GetPrecedingMediatorNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrecedingMediatorNodes", reflect.TypeOf((*MockIDag)(nil).GetPrecedingMediatorNodes))
}

// UnitIrreversibleTime mocks base method
func (m *MockIDag) UnitIrreversibleTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitIrreversibleTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// UnitIrreversibleTime indicates an expected call of UnitIrreversibleTime
func (mr *MockIDagMockRecorder) UnitIrreversibleTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitIrreversibleTime", reflect.TypeOf((*MockIDag)(nil).UnitIrreversibleTime))
}

// GenTransferPtnTx mocks base method
func (m *MockIDag) GenTransferPtnTx(from, to common.Address, daoAmount uint64, text *string, txPool txspool.ITxPool) (*modules.Transaction, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenTransferPtnTx", from, to, daoAmount, text, txPool)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenTransferPtnTx indicates an expected call of GenTransferPtnTx
func (mr *MockIDagMockRecorder) GenTransferPtnTx(from, to, daoAmount, text, txPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenTransferPtnTx", reflect.TypeOf((*MockIDag)(nil).GenTransferPtnTx), from, to, daoAmount, text, txPool)
}

// QueryDbByKey mocks base method
func (m *MockIDag) QueryDbByKey(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDbByKey", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDbByKey indicates an expected call of QueryDbByKey
func (mr *MockIDagMockRecorder) QueryDbByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDbByKey", reflect.TypeOf((*MockIDag)(nil).QueryDbByKey), key)
}

// QueryDbByPrefix mocks base method
func (m *MockIDag) QueryDbByPrefix(prefix []byte) ([]*modules.DbRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDbByPrefix", prefix)
	ret0, _ := ret[0].([]*modules.DbRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDbByPrefix indicates an expected call of QueryDbByPrefix
func (mr *MockIDagMockRecorder) QueryDbByPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDbByPrefix", reflect.TypeOf((*MockIDag)(nil).QueryDbByPrefix), prefix)
}

// GetTxHashByReqId mocks base method
func (m *MockIDag) GetTxHashByReqId(reqid common.Hash) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxHashByReqId", reqid)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxHashByReqId indicates an expected call of GetTxHashByReqId
func (mr *MockIDagMockRecorder) GetTxHashByReqId(reqid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxHashByReqId", reflect.TypeOf((*MockIDag)(nil).GetTxHashByReqId), reqid)
}

// GetTxFromAddress mocks base method
func (m *MockIDag) GetTxFromAddress(tx *modules.Transaction) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxFromAddress", tx)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxFromAddress indicates an expected call of GetTxFromAddress
func (mr *MockIDagMockRecorder) GetTxFromAddress(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxFromAddress", reflect.TypeOf((*MockIDag)(nil).GetTxFromAddress), tx)
}

// GetFileInfo mocks base method
func (m *MockIDag) GetFileInfo(filehash []byte) ([]*modules.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", filehash)
	ret0, _ := ret[0].([]*modules.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo
func (mr *MockIDagMockRecorder) GetFileInfo(filehash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockIDag)(nil).GetFileInfo), filehash)
}

// GetLightHeaderByHash mocks base method
func (m *MockIDag) GetLightHeaderByHash(headerHash common.Hash) (*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLightHeaderByHash", headerHash)
	ret0, _ := ret[0].(*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLightHeaderByHash indicates an expected call of GetLightHeaderByHash
func (mr *MockIDagMockRecorder) GetLightHeaderByHash(headerHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLightHeaderByHash", reflect.TypeOf((*MockIDag)(nil).GetLightHeaderByHash), headerHash)
}

// GetLightChainHeight mocks base method
func (m *MockIDag) GetLightChainHeight(assetId modules.AssetId) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLightChainHeight", assetId)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLightChainHeight indicates an expected call of GetLightChainHeight
func (mr *MockIDagMockRecorder) GetLightChainHeight(assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLightChainHeight", reflect.TypeOf((*MockIDag)(nil).GetLightChainHeight), assetId)
}

// InsertLightHeader mocks base method
func (m *MockIDag) InsertLightHeader(headers []*modules.Header) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLightHeader", headers)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLightHeader indicates an expected call of InsertLightHeader
func (mr *MockIDagMockRecorder) InsertLightHeader(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLightHeader", reflect.TypeOf((*MockIDag)(nil).InsertLightHeader), headers)
}

// GetAllLeafNodes mocks base method
func (m *MockIDag) GetAllLeafNodes() ([]*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLeafNodes")
	ret0, _ := ret[0].([]*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLeafNodes indicates an expected call of GetAllLeafNodes
func (mr *MockIDagMockRecorder) GetAllLeafNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLeafNodes", reflect.TypeOf((*MockIDag)(nil).GetAllLeafNodes))
}

// HeadUnitTime mocks base method
func (m *MockIDag) HeadUnitTime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadUnitTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// HeadUnitTime indicates an expected call of HeadUnitTime
func (mr *MockIDagMockRecorder) HeadUnitTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadUnitTime", reflect.TypeOf((*MockIDag)(nil).HeadUnitTime))
}

// HeadUnitNum mocks base method
func (m *MockIDag) HeadUnitNum() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadUnitNum")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// HeadUnitNum indicates an expected call of HeadUnitNum
func (mr *MockIDagMockRecorder) HeadUnitNum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadUnitNum", reflect.TypeOf((*MockIDag)(nil).HeadUnitNum))
}

// HeadUnitHash mocks base method
func (m *MockIDag) HeadUnitHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadUnitHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// HeadUnitHash indicates an expected call of HeadUnitHash
func (mr *MockIDagMockRecorder) HeadUnitHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadUnitHash", reflect.TypeOf((*MockIDag)(nil).HeadUnitHash))
}

// UpdateSysParams mocks base method
func (m *MockIDag) UpdateSysParams() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSysParams")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSysParams indicates an expected call of UpdateSysParams
func (mr *MockIDagMockRecorder) UpdateSysParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSysParams", reflect.TypeOf((*MockIDag)(nil).UpdateSysParams))
}

// ValidateUnitExceptGroupSig mocks base method
func (m *MockIDag) ValidateUnitExceptGroupSig(unit *modules.Unit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUnitExceptGroupSig", unit)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateUnitExceptGroupSig indicates an expected call of ValidateUnitExceptGroupSig
func (mr *MockIDagMockRecorder) ValidateUnitExceptGroupSig(unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUnitExceptGroupSig", reflect.TypeOf((*MockIDag)(nil).ValidateUnitExceptGroupSig), unit)
}

// RefreshSysParameters mocks base method
func (m *MockIDag) RefreshSysParameters() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshSysParameters")
}

// RefreshSysParameters indicates an expected call of RefreshSysParameters
func (mr *MockIDagMockRecorder) RefreshSysParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSysParameters", reflect.TypeOf((*MockIDag)(nil).RefreshSysParameters))
}

// SaveChaincode mocks base method
func (m *MockIDag) SaveChaincode(contractId common.Address, cc *list.CCInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChaincode", contractId, cc)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveChaincode indicates an expected call of SaveChaincode
func (mr *MockIDagMockRecorder) SaveChaincode(contractId, cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChaincode", reflect.TypeOf((*MockIDag)(nil).SaveChaincode), contractId, cc)
}

// GetChaincodes mocks base method
func (m *MockIDag) GetChaincodes(contractId common.Address) (*list.CCInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChaincodes", contractId)
	ret0, _ := ret[0].(*list.CCInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChaincodes indicates an expected call of GetChaincodes
func (mr *MockIDagMockRecorder) GetChaincodes(contractId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChaincodes", reflect.TypeOf((*MockIDag)(nil).GetChaincodes), contractId)
}

// GetPartitionChains mocks base method
func (m *MockIDag) GetPartitionChains() ([]*modules.PartitionChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionChains")
	ret0, _ := ret[0].([]*modules.PartitionChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionChains indicates an expected call of GetPartitionChains
func (mr *MockIDagMockRecorder) GetPartitionChains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionChains", reflect.TypeOf((*MockIDag)(nil).GetPartitionChains))
}

// GetMainChain mocks base method
func (m *MockIDag) GetMainChain() (*modules.MainChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainChain")
	ret0, _ := ret[0].(*modules.MainChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainChain indicates an expected call of GetMainChain
func (mr *MockIDagMockRecorder) GetMainChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainChain", reflect.TypeOf((*MockIDag)(nil).GetMainChain))
}

// GetCoinYearRate mocks base method
func (m *MockIDag) GetCoinYearRate() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinYearRate")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetCoinYearRate indicates an expected call of GetCoinYearRate
func (mr *MockIDagMockRecorder) GetCoinYearRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinYearRate", reflect.TypeOf((*MockIDag)(nil).GetCoinYearRate))
}
